{
  "address": "0x947D56B49c0E9FB35f2e16510152DE3e0469B948",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sbPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvested",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LogInit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "LogPoolAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "LogSetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "LogSetRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogSetSBPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accSBPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "accSBPerShare",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "allocPoint",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pools",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "contract IRewarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sbPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "setRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sbPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setSBPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4487f1309ebca9c194278f7eb00103e514786cbebd3af51bfdd7cc987bf41d3c",
  "receipt": {
    "to": null,
    "from": "0xD69C2Ac9b708217bCDfD932e4d24e024E1eE5D8E",
    "contractAddress": "0x947D56B49c0E9FB35f2e16510152DE3e0469B948",
    "transactionIndex": 77,
    "gasUsed": "1568126",
    "logsBloom": "0x
    "blockHash": "0x56454c161d7906bc5b7b20b050491ab56b54d77e2231d52bd2cf1112808a7592",
    "transactionHash": "0x4487f1309ebca9c194278f7eb00103e514786cbebd3af51bfdd7cc987bf41d3c",
    "logs": [
      {
        "transactionIndex": 77,
        "blockNumber": 15660110,
        "transactionHash": "0x4487f1309ebca9c194278f7eb00103e514786cbebd3af51bfdd7cc987bf41d3c",
        "address": "0x947D56B49c0E9FB35f2e16510152DE3e0469B948",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d69c2ac9b708217bcdfd932e4d24e024e1ee5d8e"
        ],
        "data": "0x",
        "logIndex": 327,
        "blockHash": "0x56454c161d7906bc5b7b20b050491ab56b54d77e2231d52bd2cf1112808a7592"
      }
    ],
    "blockNumber": 15660110,
    "cumulativeGasUsed": "13122528",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "500000000000000",
    1646080259
  ],
  "solcInputHash": "07200968edc47619ed717cdf29285180",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sbPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"LogSetRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSetSBPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accSBPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"accSBPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sbPerBlock\",\"type\":\"uint256\"}],\"name\":\"setSBPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,address,bool)\":{\"params\":{\"_lpToken\":\"Address of the LP ERC-20 token.\",\"allocPoint\":\"AP of the new pool. 100 - 1 point\"}},\"deposit(uint256,uint256,address)\":{\"params\":{\"amount\":\"LP token amount to deposit. If amount = 0, it means user wants to harvest\",\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"The receiver of `amount` deposit benefit.\"}},\"emergencyWithdraw(uint256,address)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"Receiver of the LP tokens.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingRewards(uint256,address)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"SB reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"set(uint256,uint256,bool)\":{\"params\":{\"_allocPoint\":\"New AP of the pool.\",\"_pid\":\"The index of the pool. See `poolInfo`.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"params\":{\"pid\":\"Pool ID to be updated.\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"LP token amount to withdraw.\",\"pid\":\"The index of the pool. See `poolInfo`.\"}}},\"stateVariables\":{\"totalAllocPoint\":{\"details\":\"Total allocation points. Must be the sum of all allocation points in all pools.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(uint256,address,bool)\":{\"notice\":\"Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do.\"},\"emergencyWithdraw(uint256,address)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"pendingRewards(uint256,address)\":{\"notice\":\"View function to see pending SB on frontend.\"},\"set(uint256,uint256,bool)\":{\"notice\":\"Update the given pool's SB allocation point and `IRewarder` contract.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables for pool.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SBMasterChef.sol\":\"SBMasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/SBMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SBMasterChef is Ownable, ReentrancyGuard {\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of SB entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 pendingRewards;\\n    }\\n\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// Also known as the amount of SB to distribute per block.\\n    struct PoolInfo {\\n        uint128 accSBPerShare;\\n        uint128 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 depositedAmount;\\n        address lpToken;\\n    }\\n\\n    PoolInfo[] public poolInfo;\\n    IRewarder public rewarder;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // poolId => user_address => userInfo\\n    mapping(address => bool) private poolExistence; // lp address => bool\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n    uint256 private constant ACC_SB_PRECISION = 1e12;\\n\\n    uint256 public sbPerBlock;\\n    uint256 public immutable rewardStartTimestamp;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n    event Withdraw(address indexed to, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 pending, uint256 harvested);\\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, address indexed lpToken);\\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\\n    event LogUpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accSBPerShare);\\n    event LogInit();\\n    event LogSetRewarder(address indexed _user, address indexed _rewarder);\\n    event LogSetSBPerBlock(address indexed user, uint256 amount);\\n\\n    constructor(uint256 _sbPerBlock, uint256 _rewardTimestamp) {\\n        require(_rewardTimestamp >= block.timestamp, \\\"SBMasterChef: Invalid reward start timestamp\\\");\\n        sbPerBlock = _sbPerBlock;\\n        rewardStartTimestamp = _rewardTimestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256 pools) {\\n        pools = poolInfo.length;\\n    }\\n\\n    function setRewarder(IRewarder _rewarder) external onlyOwner {\\n        require(address(_rewarder) != address(rewarder), \\\"It is old rewader\\\");\\n        require(address(_rewarder) != address(0), \\\"SBMasterChef: ZERO address\\\");\\n        rewarder = _rewarder;\\n\\n        emit LogSetRewarder(msg.sender, address(_rewarder));\\n    }\\n\\n    function setSBPerBlock(uint256 _sbPerBlock) external onlyOwner {\\n        require(_sbPerBlock != sbPerBlock, \\\"It is old value\\\");\\n        massUpdatePools();\\n\\n        sbPerBlock = _sbPerBlock;\\n        emit LogSetSBPerBlock(msg.sender, _sbPerBlock);\\n    }\\n\\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    /// @param allocPoint AP of the new pool. 100 - 1 point\\n    /// @param _lpToken Address of the LP ERC-20 token.\\n    function add(\\n        uint256 allocPoint,\\n        address _lpToken,\\n        bool _withUpdate\\n    ) external onlyOwner nonReentrant {\\n        require(!poolExistence[_lpToken], \\\"SBMasterChef: Pool already exists\\\");\\n        require(_lpToken != address(0), \\\"SBMasterChef: ZERO address\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        totalAllocPoint = totalAllocPoint + allocPoint;\\n        poolExistence[_lpToken] = true;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                accSBPerShare: 0,\\n                allocPoint: uint128(allocPoint),\\n                lastRewardBlock: block.number,\\n                depositedAmount: 0,\\n                lpToken: _lpToken\\n            })\\n        );\\n        emit LogPoolAddition(poolInfo.length - 1, allocPoint, _lpToken);\\n    }\\n\\n    /// @notice Update the given pool's SB allocation point and `IRewarder` contract.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _allocPoint New AP of the pool.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        require(_pid < poolInfo.length, \\\"SBMasterChef: Pool does not exist\\\");\\n        require(poolInfo[_pid].allocPoint != _allocPoint, \\\"It is old alloc point\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n        poolInfo[_pid].allocPoint = uint128(_allocPoint);\\n        emit LogSetPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice View function to see pending SB on frontend.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _user Address of user.\\n    /// @return pending SB reward for a given user.\\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256 pending) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 accSBPerShare = pool.accSBPerShare;\\n        uint256 lpSupply = pool.depositedAmount;\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 blocks = block.number - pool.lastRewardBlock;\\n            uint256 sbReward = (blocks * sbPerBlock * pool.allocPoint) / totalAllocPoint;\\n            accSBPerShare = accSBPerShare + ((sbReward * ACC_SB_PRECISION) / lpSupply);\\n        }\\n        pending = user.pendingRewards + (user.amount * accSBPerShare) / ACC_SB_PRECISION - uint256(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    /// @notice Update reward variables for pool.\\n    /// @param pid Pool ID to be updated.\\n    function updatePool(uint256 pid) external nonReentrant {\\n        _updatePool(pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    function _updatePool(uint256 pid) private {\\n        PoolInfo storage pool = poolInfo[pid];\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 lpSupply = pool.depositedAmount;\\n            if (lpSupply > 0) {\\n                uint256 blocks = block.number - pool.lastRewardBlock;\\n                uint256 sbReward = (blocks * sbPerBlock * pool.allocPoint) / totalAllocPoint;\\n                pool.accSBPerShare = pool.accSBPerShare + uint128((sbReward * ACC_SB_PRECISION) / lpSupply);\\n            }\\n            pool.lastRewardBlock = block.number;\\n            emit LogUpdatePool(pid, pool.lastRewardBlock, lpSupply, pool.accSBPerShare);\\n        }\\n    }\\n\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param amount LP token amount to deposit. If amount = 0, it means user wants to harvest\\n    /// @param to The receiver of `amount` deposit benefit.\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external nonReentrant {\\n        require(pid < poolInfo.length, \\\"SBMasterChef: Pool does not exist\\\");\\n        require(block.timestamp > rewardStartTimestamp, \\\"SBMasterChef: Deposit is not started yet\\\");\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][to];\\n        _updatePool(pid);\\n\\n        // harvest current reward\\n        if (user.amount > 0) {\\n            harvest(pid, to);\\n        }\\n\\n        if (amount > 0) {\\n            TransferHelper.safeTransferFrom(pool.lpToken, msg.sender, address(this), amount);\\n            user.amount = user.amount + amount;\\n        }\\n\\n        pool.depositedAmount += amount;\\n        user.rewardDebt = (user.amount * pool.accSBPerShare) / ACC_SB_PRECISION;\\n        emit Deposit(msg.sender, pid, amount, to);\\n    }\\n\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param amount LP token amount to withdraw.\\n    function withdraw(uint256 pid, uint256 amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        require(user.amount >= amount, \\\"SBMasterChef: Invalid amount\\\");\\n        _updatePool(pid);\\n        harvest(pid, msg.sender);\\n\\n        if (amount > 0) {\\n            user.amount = user.amount - amount;\\n            TransferHelper.safeTransfer(pool.lpToken, msg.sender, amount);\\n        }\\n\\n        pool.depositedAmount -= amount;\\n        user.rewardDebt = (user.amount * pool.accSBPerShare) / ACC_SB_PRECISION;\\n\\n        emit Withdraw(msg.sender, pid, amount);\\n    }\\n\\n    /// @notice Harvest proceeds for transaction sender to `to`.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param to Receiver of SB rewards.\\n    function harvest(uint256 pid, address to) private {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][to];\\n\\n        // harvest current reward\\n        uint256 pending = user.pendingRewards + (user.amount * pool.accSBPerShare) / ACC_SB_PRECISION - user.rewardDebt;\\n        user.pendingRewards = pending;\\n\\n        uint256 harvested;\\n        if (pending > 0) {\\n            harvested = IRewarder(rewarder).onSBReward(to, pending);\\n            // We assume harvested amount is less than pendingRewards\\n            user.pendingRewards -= harvested;\\n        }\\n\\n        emit Harvest(to, pid, pending, harvested);\\n    }\\n\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param to Receiver of the LP tokens.\\n    function emergencyWithdraw(uint256 pid, address to) external nonReentrant {\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        TransferHelper.safeTransfer(poolInfo[pid].lpToken, to, amount);\\n\\n        poolInfo[pid].depositedAmount -= amount;\\n        emit EmergencyWithdraw(msg.sender, pid, amount, to);\\n    }\\n}\\n\",\"keccak256\":\"0xe691d8c409e2f1a2c898c4cebae9f69ed54a251144009bea6ff5997dce348343\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IRewarder {\\n    function onSBReward(address to, uint256 amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x91502195c0d0c98e70c26f4e818fedba1a447a5eda34e9d38be1e9f9e688edbb\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.4;\\n\\n// helper methods for interacting with ERC20 tokens\\nlibrary TransferHelper {\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x161b1825787b7ecc354cf83a2c97ae29d636c1cb56122b2e2ba12d0038091a77\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611b62380380611b6283398101604081905261002f916100eb565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055428110156100dd5760405162461bcd60e51b815260206004820152602c60248201527f53424d6173746572436865663a20496e76616c6964207265776172642073746160448201526b072742074696d657374616d760a41b606482015260840160405180910390fd5b60079190915560805261010e565b600080604083850312156100fd578182fd5b505080516020909101519092909150565b608051611a326101306000396000818161030b0152610d0e0152611a326000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806364482f79116100ad578063af087f3f11610071578063af087f3f146102ba578063d18df53c146102cd578063dcc3e06e146102e0578063f2fde38b146102f3578063fcb685bc1461030657600080fd5b806364482f7914610212578063715018a6146102255780638da5cb5b1461022d5780638dbdbe6d1461025257806393f1a40b1461026557600080fd5b80633a6462e4116100f45780633a6462e4146101c8578063441a3e70146101db57806351eb05a6146101ee57806358efedfb14610201578063630b5ba11461020a57600080fd5b8063081e3eda146101315780631526fe271461014857806317caf6f1146101975780631eaaa045146101a05780632f940c70146101b5575b600080fd5b6002545b6040519081526020015b60405180910390f35b61015b61015636600461170b565b61032d565b604080516001600160801b0396871681529590941660208601529284019190915260608301526001600160a01b0316608082015260a00161013f565b61013560065481565b6101b36101ae36600461176a565b610386565b005b6101b36101c336600461173b565b610645565b6101b36101d63660046116cc565b610771565b6101b36101e93660046117ab565b61088f565b6101b36101fc36600461170b565b610a22565b61013560075481565b6101b3610a5a565b6101b36102203660046117f9565b610a85565b6101b3610c4f565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161013f565b6101b36102603660046117cc565b610cc3565b61029f61027336600461173b565b600460209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161013f565b6101b36102c836600461170b565b610ebf565b6101356102db36600461173b565b610f72565b60035461023a906001600160a01b031681565b6101b36103013660046116cc565b6110b4565b6101357f000000000000000000000000000000000000000000000000000000000000000081565b6002818154811061033d57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160801b038084169550600160801b9093049092169290916001600160a01b031685565b6000546001600160a01b031633146103b95760405162461bcd60e51b81526004016103b0906118a0565b60405180910390fd5b600260015414156103dc5760405162461bcd60e51b81526004016103b0906118d5565b60026001556001600160a01b03821660009081526005602052604090205460ff16156104545760405162461bcd60e51b815260206004820152602160248201527f53424d6173746572436865663a20506f6f6c20616c72656164792065786973746044820152607360f81b60648201526084016103b0565b6001600160a01b0382166104aa5760405162461bcd60e51b815260206004820152601a60248201527f53424d6173746572436865663a205a45524f206164647265737300000000000060448201526064016103b0565b80156104b8576104b8610a5a565b826006546104c69190611937565b6006556001600160a01b038083166000818152600560209081526040808320805460ff19166001908117909155815160a0810183528481526001600160801b038a811694820194855243938201938452606082018681526080830188815260028054808701825598819052935196518316600160801b02969092169590951760049096027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81019690965592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf86015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad085015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad19093018054939095166001600160a01b031990931692909217909355915490916106099161198e565b6040518581527f4710feb78e3bce8d2e3ca2989a8eb2f8bcd32a6a55b4535942c180fc4d2e29529060200160405180910390a350506001805550565b600260015414156106685760405162461bcd60e51b81526004016103b0906118d5565b6002600181815560008481526004602090815260408083203384529091528120805482825592810191909155825490926106de91869081106106ba57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360049092020101546001600160a01b0316848361119e565b806002858154811061070057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402016002016000828254610720919061198e565b90915550506040518181526001600160a01b03841690859033907f2cac5e20e1541d836381527a43f651851e302817b71dc8e810284e69210c1c6b9060200160405180910390a45050600180555050565b6000546001600160a01b0316331461079b5760405162461bcd60e51b81526004016103b0906118a0565b6003546001600160a01b03828116911614156107ed5760405162461bcd60e51b815260206004820152601160248201527024ba1034b99037b632103932bbb0b232b960791b60448201526064016103b0565b6001600160a01b0381166108435760405162461bcd60e51b815260206004820152601a60248201527f53424d6173746572436865663a205a45524f206164647265737300000000000060448201526064016103b0565b600380546001600160a01b0319166001600160a01b03831690811790915560405133907f4334260533fff8833fd6664177a3ae8e37e480fe975ef2e54346a991108c199290600090a350565b600260015414156108b25760405162461bcd60e51b81526004016103b0906118d5565b60026001819055506000600283815481106108dd57634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600480835260408086203387529093529190932080549290910290920192508311156109585760405162461bcd60e51b815260206004820152601c60248201527f53424d6173746572436865663a20496e76616c696420616d6f756e740000000060448201526064016103b0565b610961846112b9565b61096b84336113fe565b821561099957805461097e90849061198e565b81556003820154610999906001600160a01b0316338561119e565b828260020160008282546109ad919061198e565b90915550508154815464e8d4a51000916109d2916001600160801b039091169061196f565b6109dc919061194f565b6001820155604051838152849033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a35050600180555050565b60026001541415610a455760405162461bcd60e51b81526004016103b0906118d5565b6002600155610a53816112b9565b5060018055565b60025460005b81811015610a8157610a71816112b9565b610a7a816119a5565b9050610a60565b5050565b6000546001600160a01b03163314610aaf5760405162461bcd60e51b81526004016103b0906118a0565b6002548310610ad05760405162461bcd60e51b81526004016103b09061185f565b8160028481548110610af257634e487b7160e01b600052603260045260246000fd5b6000918252602090912060049091020154600160801b90046001600160801b03161415610b595760405162461bcd60e51b8152602060048201526015602482015274125d081a5cc81bdb1908185b1b1bd8c81c1bda5b9d605a1b60448201526064016103b0565b8015610b6757610b67610a5a565b8160028481548110610b8957634e487b7160e01b600052603260045260246000fd5b6000918252602090912060049091020154600654610bb791600160801b90046001600160801b03169061198e565b610bc19190611937565b6006819055508160028481548110610be957634e487b7160e01b600052603260045260246000fd5b600091825260209182902060049091020180546001600160801b03938416600160801b0293169290921790915560405183815284917f942cc7e17a17c164bd977f32ab8c54265d5b9d481e4e352bf874f1e568874e7c91015b60405180910390a2505050565b6000546001600160a01b03163314610c795760405162461bcd60e51b81526004016103b0906118a0565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60026001541415610ce65760405162461bcd60e51b81526004016103b0906118d5565b60026001819055548310610d0c5760405162461bcd60e51b81526004016103b09061185f565b7f00000000000000000000000000000000000000000000000000000000000000004211610d8c5760405162461bcd60e51b815260206004820152602860248201527f53424d6173746572436865663a204465706f736974206973206e6f74207374616044820152671c9d1959081e595d60c21b60648201526084016103b0565b600060028481548110610daf57634e487b7160e01b600052603260045260246000fd5b60009182526020808320878452600480835260408086206001600160a01b03891687529093529190932091029091019150610de9856112b9565b805415610dfa57610dfa85846113fe565b8315610e2a576003820154610e1a906001600160a01b031633308761159c565b8054610e27908590611937565b81555b83826002016000828254610e3e9190611937565b90915550508154815464e8d4a5100091610e63916001600160801b039091169061196f565b610e6d919061194f565b60018201556040518481526001600160a01b03841690869033907f02d7e648dd130fc184d383e55bb126ac4c9c60e8f94bf05acdf557ba2d540b479060200160405180910390a4505060018055505050565b6000546001600160a01b03163314610ee95760405162461bcd60e51b81526004016103b0906118a0565b600754811415610f2d5760405162461bcd60e51b815260206004820152600f60248201526e4974206973206f6c642076616c756560881b60448201526064016103b0565b610f35610a5a565b600781905560405181815233907fc0e14173085ca25266aeedbf8042bef76844afb60f898d40ef9927b075c5aebb9060200160405180910390a250565b60008060028481548110610f9657634e487b7160e01b600052603260045260246000fd5b60009182526020808320878452600480835260408086206001600160a01b038a1687529093529190932091029091018054600282015460018301549294506001600160801b039091169143118015610fed57508015155b1561106d576000846001015443611004919061198e565b6006548654600754929350600092600160801b9091046001600160801b03169061102e908561196f565b611038919061196f565b611042919061194f565b90508261105464e8d4a510008361196f565b61105e919061194f565b6110689085611937565b935050505b6001830154835464e8d4a510009061108690859061196f565b611090919061194f565b846002015461109f9190611937565b6110a9919061198e565b979650505050505050565b6000546001600160a01b031633146110de5760405162461bcd60e51b81526004016103b0906118a0565b6001600160a01b0381166111435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916111fa9190611826565b6000604051808303816000865af19150503d8060008114611237576040519150601f19603f3d011682016040523d82523d6000602084013e61123c565b606091505b509150915081801561126657508051158061126657508080602001905181019061126691906116ef565b6112b25760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016103b0565b5050505050565b6000600282815481106112dc57634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020190508060010154431115610a8157600281015480156113ab576000826001015443611315919061198e565b6006548454600754929350600092600160801b9091046001600160801b03169061133f908561196f565b611349919061196f565b611353919061194f565b90508261136564e8d4a510008361196f565b61136f919061194f565b845461138491906001600160801b031661190c565b84546fffffffffffffffffffffffffffffffff19166001600160801b039190911617845550505b4360018301819055825460408051928352602083018490526001600160801b039091169082015283907fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d290606001610c42565b60006002838154811061142157634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600480835260408086206001600160a01b0389168752909352918420600181015492909302018054835491955092939264e8d4a5100091611478916001600160801b03169061196f565b611482919061194f565b83600201546114919190611937565b61149b919061198e565b6002830181905590506000811561154e57600354604051639bd4f1a960e01b81526001600160a01b0387811660048301526024820185905290911690639bd4f1a990604401602060405180830381600087803b1580156114fa57600080fd5b505af115801561150e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115329190611723565b905080836002016000828254611548919061198e565b90915550505b604080518381526020810183905287916001600160a01b038816917f4534f107610758c3931de9ad1e176476fcfb8c74adf920167e1d54ee84fcfe76910160405180910390a3505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916116009190611826565b6000604051808303816000865af19150503d806000811461163d576040519150601f19603f3d011682016040523d82523d6000602084013e611642565b606091505b509150915081801561166c57508051158061166c57508080602001905181019061166c91906116ef565b6116c45760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016103b0565b505050505050565b6000602082840312156116dd578081fd5b81356116e8816119d6565b9392505050565b600060208284031215611700578081fd5b81516116e8816119ee565b60006020828403121561171c578081fd5b5035919050565b600060208284031215611734578081fd5b5051919050565b6000806040838503121561174d578081fd5b82359150602083013561175f816119d6565b809150509250929050565b60008060006060848603121561177e578081fd5b833592506020840135611790816119d6565b915060408401356117a0816119ee565b809150509250925092565b600080604083850312156117bd578182fd5b50508035926020909101359150565b6000806000606084860312156117e0578283fd5b833592506020840135915060408401356117a0816119d6565b60008060006060848603121561180d578283fd5b833592506020840135915060408401356117a0816119ee565b60008251815b81811015611846576020818601810151858301520161182c565b818111156118545782828501525b509190910192915050565b60208082526021908201527f53424d6173746572436865663a20506f6f6c20646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006001600160801b0380831681851680830382111561192e5761192e6119c0565b01949350505050565b6000821982111561194a5761194a6119c0565b500190565b60008261196a57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611989576119896119c0565b500290565b6000828210156119a0576119a06119c0565b500390565b60006000198214156119b9576119b96119c0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146119eb57600080fd5b50565b80151581146119eb57600080fdfea26469706673582212203f3a91eda62a0843a90e2d053f35faa5547c9ba5b61f37cb48da728c45195bfc64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,address,bool)": {
        "params": {
          "_lpToken": "Address of the LP ERC-20 token.",
          "allocPoint": "AP of the new pool. 100 - 1 point"
        }
      },
      "deposit(uint256,uint256,address)": {
        "params": {
          "amount": "LP token amount to deposit. If amount = 0, it means user wants to harvest",
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "The receiver of `amount` deposit benefit."
        }
      },
      "emergencyWithdraw(uint256,address)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "Receiver of the LP tokens."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingRewards(uint256,address)": {
        "params": {
          "_pid": "The index of the pool. See `poolInfo`.",
          "_user": "Address of user."
        },
        "returns": {
          "pending": "SB reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "set(uint256,uint256,bool)": {
        "params": {
          "_allocPoint": "New AP of the pool.",
          "_pid": "The index of the pool. See `poolInfo`."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "params": {
          "pid": "Pool ID to be updated."
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "LP token amount to withdraw.",
          "pid": "The index of the pool. See `poolInfo`."
        }
      }
    },
    "stateVariables": {
      "totalAllocPoint": {
        "details": "Total allocation points. Must be the sum of all allocation points in all pools."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(uint256,address,bool)": {
        "notice": "Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do."
      },
      "emergencyWithdraw(uint256,address)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "pendingRewards(uint256,address)": {
        "notice": "View function to see pending SB on frontend."
      },
      "set(uint256,uint256,bool)": {
        "notice": "Update the given pool's SB allocation point and `IRewarder` contract."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables for pool."
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each user that stakes LP tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SBMasterChef.sol:SBMasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/SBMasterChef.sol:SBMasterChef",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 922,
        "contract": "contracts/SBMasterChef.sol:SBMasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(PoolInfo)918_storage)dyn_storage"
      },
      {
        "astId": 925,
        "contract": "contracts/SBMasterChef.sol:SBMasterChef",
        "label": "rewarder",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IRewarder)1861"
      },
      {
        "astId": 933,
        "contract": "contracts/SBMasterChef.sol:SBMasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)907_storage))"
      },
      {
        "astId": 937,
        "contract": "contracts/SBMasterChef.sol:SBMasterChef",
        "label": "poolExistence",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 940,
        "contract": "contracts/SBMasterChef.sol:SBMasterChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 945,
        "contract": "contracts/SBMasterChef.sol:SBMasterChef",
        "label": "sbPerBlock",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)918_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)918_storage",
        "encoding": "dynamic_array",
        "label": "struct SBMasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRewarder)1861": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)907_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SBMasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)907_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)907_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct SBMasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)907_storage)"
      },
      "t_struct(PoolInfo)918_storage": {
        "encoding": "inplace",
        "label": "struct SBMasterChef.PoolInfo",
        "members": [
          {
            "astId": 909,
            "contract": "contracts/SBMasterChef.sol:SBMasterChef",
            "label": "accSBPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 911,
            "contract": "contracts/SBMasterChef.sol:SBMasterChef",
            "label": "allocPoint",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 913,
            "contract": "contracts/SBMasterChef.sol:SBMasterChef",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 915,
            "contract": "contracts/SBMasterChef.sol:SBMasterChef",
            "label": "depositedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 917,
            "contract": "contracts/SBMasterChef.sol:SBMasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)907_storage": {
        "encoding": "inplace",
        "label": "struct SBMasterChef.UserInfo",
        "members": [
          {
            "astId": 902,
            "contract": "contracts/SBMasterChef.sol:SBMasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 904,
            "contract": "contracts/SBMasterChef.sol:SBMasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 906,
            "contract": "contracts/SBMasterChef.sol:SBMasterChef",
            "label": "pendingRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}